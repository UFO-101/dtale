"use strict";
self["webpackHotUpdatedtale"]("main",{

/***/ "./static/dtale/serverStateManagement.ts":
/*!***********************************************!*\
  !*** ./static/dtale/serverStateManagement.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteColumns = exports.deleteColumn = exports.toggleVisibility = exports.updateVisibility = exports.moveLeft = exports.moveRight = exports.moveToBack = exports.moveToFront = exports.loadFilteredRanges = exports.updateMaxRowHeight = exports.updateMaxColumnWidth = exports.updateLanguage = exports.updatePinMenu = exports.updateQueryEngine = exports.updateTheme = exports.editCell = exports.lastClickedCell = exports.updateFormats = exports.renameColumn = exports.moveFiltersToCustom = exports.dropFilteredRows = exports.updateSettings = exports.saveRangeHighlights = exports.unlockCols = exports.lockCols = exports.executeAction = void 0;
const url_utils_1 = __webpack_require__(/*! ../redux/actions/url-utils */ "./static/redux/actions/url-utils.ts");
const GenericRepository_1 = __webpack_require__(/*! ../repository/GenericRepository */ "./static/repository/GenericRepository.ts");
const baseGetter = async (apiEndpoint) => await (0, GenericRepository_1.getDataFromService)(`/dtale/${apiEndpoint}`);
const executeAction = async (route, dataId, params) => await (0, GenericRepository_1.getDataFromService)((0, url_utils_1.buildURLString)(`/dtale/${route}/${dataId}?`, params));
exports.executeAction = executeAction;
/**
 * Create a function to move a column one position left or right.
 *
 * @param selectedCol the column to move
 * @param props input parameters for column operations
 * @param action the movement to make
 * @return function to move a column
 */
function moveOnePosition(selectedCol, props, action) {
    const { columns, propagateState, dataId } = props;
    return () => {
        const locked = columns.filter((column) => column.locked);
        const unlocked = columns.filter((column) => !column.locked);
        const selectedIdx = unlocked.findIndex(({ name }) => name === selectedCol);
        if (action === 'right' && selectedIdx === unlocked.length - 1) {
            return;
        }
        if (action === 'left' && selectedIdx === 0) {
            return;
        }
        const moveToRightIdx = action === 'right' ? selectedIdx : selectedIdx - 1;
        const moveToRight = { ...unlocked[moveToRightIdx] };
        const moveToLeftIdx = action === 'right' ? selectedIdx + 1 : selectedIdx;
        const moveToLeft = { ...unlocked[moveToLeftIdx] };
        unlocked[moveToRightIdx] = moveToLeft;
        unlocked[moveToLeftIdx] = moveToRight;
        const finalCols = [...locked, ...unlocked];
        propagateState({ columns: finalCols, triggerResize: true }, async () => await (0, exports.executeAction)('update-column-position', dataId, { col: selectedCol, action }));
    };
}
/**
 * Create a function to move a column to the front or back.
 *
 * @param selectedCol the column to move
 * @param props input parameters for column operations
 * @param action the movement to make
 * @return a function to move a column
 */
function moveTo(selectedCol, props, action = 'front') {
    const { columns, propagateState, dataId } = props;
    return () => {
        const locked = columns.filter((column) => column.locked);
        const colsToMove = columns.filter((column) => selectedCol === column.name && !column.locked);
        const unselectedAndUnlockedCols = columns.filter(({ name }) => selectedCol !== name && !locked.find((column) => column.name === name));
        const finalCols = action === 'front'
            ? [...locked, ...colsToMove, ...unselectedAndUnlockedCols]
            : [...locked, ...unselectedAndUnlockedCols, ...colsToMove];
        propagateState({ columns: finalCols, triggerResize: true }, async () => await (0, exports.executeAction)('update-column-position', dataId, { col: selectedCol, action }));
    };
}
/**
 * Create a function to pin columns to the left-hand side of the grid.
 *
 * @param selectedCols the columns to pin
 * @param props input parameters for column operations
 * @return a function to pin columns
 */
function lockCols(selectedCols, props) {
    const { columns, propagateState, dataId } = props;
    return () => {
        const currentlyLocked = columns.filter((column) => column.locked);
        const newLocks = columns
            .filter(({ name }) => selectedCols.includes(name))
            .map((column) => ({ ...column, locked: true }));
        const locked = [...currentlyLocked, ...newLocks];
        propagateState({
            columns: [...locked, ...columns.filter(({ name }) => !locked.find((column) => column.name === name))],
            fixedColumnCount: locked.length,
            triggerResize: true,
        }, async () => await (0, exports.executeAction)('update-locked', dataId, { col: selectedCols[0], action: 'lock' }));
    };
}
exports.lockCols = lockCols;
/**
 * Create a function to unpin columns from the left-hand side of the grid.
 *
 * @param selectedCols the columns to unpin
 * @param props input parameters for column operations
 * @return a function unpin columns
 */
function unlockCols(selectedCols, props) {
    const { columns, propagateState, dataId } = props;
    return () => {
        const currentlyLocked = columns.filter((column) => column.locked);
        const unlocked = currentlyLocked
            .filter(({ name }) => selectedCols.includes(name))
            .map((column) => ({ ...column, locked: false }));
        const locked = currentlyLocked.filter(({ name }) => !selectedCols.includes(name));
        propagateState({
            columns: [...locked, ...unlocked, ...columns.filter((c) => !c.locked)],
            fixedColumnCount: locked.length,
            triggerResize: true,
        }, async () => await (0, exports.executeAction)('update-locked', dataId, { col: selectedCols[0], action: 'unlock' }));
    };
}
exports.unlockCols = unlockCols;
const persistVisibility = async (dataId, params) => await (0, GenericRepository_1.postDataToService)(`/dtale/update-visibility/${dataId}`, params);
const saveRangeHighlights = async (dataId, ranges) => await (0, GenericRepository_1.postDataToService)(`/dtale/save-range-highlights/${dataId}`, {
    ranges: JSON.stringify(ranges),
});
exports.saveRangeHighlights = saveRangeHighlights;
const updateSettings = async (settings, dataId) => await baseGetter((0, url_utils_1.buildURLString)(`update-settings/${dataId}?`, { settings: JSON.stringify(settings) }));
exports.updateSettings = updateSettings;
const dropFilteredRows = async (dataId, callback) => await baseGetter(`drop-filtered-rows/${dataId}`);
exports.dropFilteredRows = dropFilteredRows;
const moveFiltersToCustom = async (dataId) => await baseGetter(`move-filters-to-custom/${dataId}`);
exports.moveFiltersToCustom = moveFiltersToCustom;
const renameColumn = async (dataId, col, rename) => await baseGetter((0, url_utils_1.buildURLString)(`rename-col/${dataId}`, { col, rename }));
exports.renameColumn = renameColumn;
const updateFormats = async (dataId, col, format, all, nanDisplay) => await baseGetter((0, url_utils_1.buildURLString)(`update-formats/${dataId}`, {
    col,
    format: JSON.stringify(format),
    all: `${all}`,
    nanDisplay,
}));
exports.updateFormats = updateFormats;
const lastClickedCell = async (dataId, rowIndex, col) => {
    let colName = col ? col : '';
    return await baseGetter((0, url_utils_1.buildURLString)(`last-clicked-cell/${dataId}`, { rowIndex: `${rowIndex}`, colName }));
};
exports.lastClickedCell = lastClickedCell;
const editCell = async (dataId, col, rowIndex, updated) => await baseGetter((0, url_utils_1.buildURLString)(`edit-cell/${dataId}`, { col, rowIndex: `${rowIndex}`, updated }));
exports.editCell = editCell;
const updateTheme = async (theme) => await baseGetter((0, url_utils_1.buildURLString)('update-theme', { theme }));
exports.updateTheme = updateTheme;
const updateQueryEngine = async (engine) => await baseGetter((0, url_utils_1.buildURLString)('update-query-engine', { engine }));
exports.updateQueryEngine = updateQueryEngine;
const updatePinMenu = async (pinned) => await baseGetter((0, url_utils_1.buildURLString)('update-pin-menu', { pinned: `${pinned}` }));
exports.updatePinMenu = updatePinMenu;
const updateLanguage = async (language) => await baseGetter((0, url_utils_1.buildURLString)('update-language', { language }));
exports.updateLanguage = updateLanguage;
const updateMaxColumnWidth = async (width) => await baseGetter((0, url_utils_1.buildURLString)('update-maximum-column-width', { width: width ? `${width}` : '' }));
exports.updateMaxColumnWidth = updateMaxColumnWidth;
const updateMaxRowHeight = async (height) => await baseGetter((0, url_utils_1.buildURLString)('update-maximum-row-height', { height: `${height}` }));
exports.updateMaxRowHeight = updateMaxRowHeight;
const loadFilteredRanges = async (dataId) => await baseGetter(`load-filtered-ranges/${dataId}`);
exports.loadFilteredRanges = loadFilteredRanges;
const deleteCols = async (dataId, cols) => await baseGetter((0, url_utils_1.buildURLString)(`delete-col/${dataId}`, { cols: JSON.stringify(cols) }));
const moveToFront = (selectedCol, props) => moveTo(selectedCol, props, 'front');
exports.moveToFront = moveToFront;
const moveToBack = (selectedCol, props) => moveTo(selectedCol, props, 'back');
exports.moveToBack = moveToBack;
const moveRight = (selectedCol, props) => moveOnePosition(selectedCol, props, 'right');
exports.moveRight = moveRight;
const moveLeft = (selectedCol, props) => moveOnePosition(selectedCol, props, 'left');
exports.moveLeft = moveLeft;
const updateVisibility = async (dataId, visibility) => await persistVisibility(dataId, { visibility: JSON.stringify(visibility) });
exports.updateVisibility = updateVisibility;
const toggleVisibility = async (dataId, toggle) => await persistVisibility(dataId, { toggle });
exports.toggleVisibility = toggleVisibility;
const deleteColumn = async (dataId, col) => await deleteCols(dataId, [col]);
exports.deleteColumn = deleteColumn;
const deleteColumns = async (dataId, cols) => await deleteCols(dataId, cols);
exports.deleteColumns = deleteColumns;


/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("850ecba6308e93569ef1")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,