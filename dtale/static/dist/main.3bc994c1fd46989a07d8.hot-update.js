"use strict";
self["webpackHotUpdatedtale"]("main",{

/***/ "./static/dtale/serverStateManagement.ts":
/*!***********************************************!*\
  !*** ./static/dtale/serverStateManagement.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deleteColumns = exports.deleteColumn = exports.toggleVisibility = exports.updateVisibility = exports.moveLeft = exports.moveRight = exports.moveToBack = exports.moveToFront = exports.loadFilteredRanges = exports.updateMaxRowHeight = exports.updateMaxColumnWidth = exports.updateLanguage = exports.updatePinMenu = exports.updateQueryEngine = exports.updateTheme = exports.editCell = exports.lastClickedCell = exports.updateFormats = exports.renameColumn = exports.moveFiltersToCustom = exports.dropFilteredRows = exports.updateSettings = exports.saveRangeHighlights = exports.unlockCols = exports.lockCols = exports.executeAction = void 0;
const url_utils_1 = __webpack_require__(/*! ../redux/actions/url-utils */ "./static/redux/actions/url-utils.ts");
const GenericRepository_1 = __webpack_require__(/*! ../repository/GenericRepository */ "./static/repository/GenericRepository.ts");
const baseGetter = async (apiEndpoint) => await (0, GenericRepository_1.getDataFromService)(`/dtale/${apiEndpoint}`);
const executeAction = async (route, dataId, params) => await (0, GenericRepository_1.getDataFromService)((0, url_utils_1.buildURLString)(`/dtale/${route}/${dataId}?`, params));
exports.executeAction = executeAction;
/**
 * Create a function to move a column one position left or right.
 *
 * @param selectedCol the column to move
 * @param props input parameters for column operations
 * @param action the movement to make
 * @return function to move a column
 */
function moveOnePosition(selectedCol, props, action) {
    const { columns, propagateState, dataId } = props;
    return () => {
        const locked = columns.filter((column) => column.locked);
        const unlocked = columns.filter((column) => !column.locked);
        const selectedIdx = unlocked.findIndex(({ name }) => name === selectedCol);
        if (action === 'right' && selectedIdx === unlocked.length - 1) {
            return;
        }
        if (action === 'left' && selectedIdx === 0) {
            return;
        }
        const moveToRightIdx = action === 'right' ? selectedIdx : selectedIdx - 1;
        const moveToRight = { ...unlocked[moveToRightIdx] };
        const moveToLeftIdx = action === 'right' ? selectedIdx + 1 : selectedIdx;
        const moveToLeft = { ...unlocked[moveToLeftIdx] };
        unlocked[moveToRightIdx] = moveToLeft;
        unlocked[moveToLeftIdx] = moveToRight;
        const finalCols = [...locked, ...unlocked];
        propagateState({ columns: finalCols, triggerResize: true }, async () => await (0, exports.executeAction)('update-column-position', dataId, { col: selectedCol, action }));
    };
}
/**
 * Create a function to move a column to the front or back.
 *
 * @param selectedCol the column to move
 * @param props input parameters for column operations
 * @param action the movement to make
 * @return a function to move a column
 */
function moveTo(selectedCol, props, action = 'front') {
    const { columns, propagateState, dataId } = props;
    return () => {
        const locked = columns.filter((column) => column.locked);
        const colsToMove = columns.filter((column) => selectedCol === column.name && !column.locked);
        const unselectedAndUnlockedCols = columns.filter(({ name }) => selectedCol !== name && !locked.find((column) => column.name === name));
        const finalCols = action === 'front'
            ? [...locked, ...colsToMove, ...unselectedAndUnlockedCols]
            : [...locked, ...unselectedAndUnlockedCols, ...colsToMove];
        propagateState({ columns: finalCols, triggerResize: true }, async () => await (0, exports.executeAction)('update-column-position', dataId, { col: selectedCol, action }));
    };
}
/**
 * Create a function to pin columns to the left-hand side of the grid.
 *
 * @param selectedCols the columns to pin
 * @param props input parameters for column operations
 * @return a function to pin columns
 */
function lockCols(selectedCols, props) {
    const { columns, propagateState, dataId } = props;
    return () => {
        const currentlyLocked = columns.filter((column) => column.locked);
        const newLocks = columns
            .filter(({ name }) => selectedCols.includes(name))
            .map((column) => ({ ...column, locked: true }));
        const locked = [...currentlyLocked, ...newLocks];
        propagateState({
            columns: [...locked, ...columns.filter(({ name }) => !locked.find((column) => column.name === name))],
            fixedColumnCount: locked.length,
            triggerResize: true,
        }, async () => await (0, exports.executeAction)('update-locked', dataId, { col: selectedCols[0], action: 'lock' }));
    };
}
exports.lockCols = lockCols;
/**
 * Create a function to unpin columns from the left-hand side of the grid.
 *
 * @param selectedCols the columns to unpin
 * @param props input parameters for column operations
 * @return a function unpin columns
 */
function unlockCols(selectedCols, props) {
    const { columns, propagateState, dataId } = props;
    return () => {
        const currentlyLocked = columns.filter((column) => column.locked);
        const unlocked = currentlyLocked
            .filter(({ name }) => selectedCols.includes(name))
            .map((column) => ({ ...column, locked: false }));
        const locked = currentlyLocked.filter(({ name }) => !selectedCols.includes(name));
        propagateState({
            columns: [...locked, ...unlocked, ...columns.filter((c) => !c.locked)],
            fixedColumnCount: locked.length,
            triggerResize: true,
        }, async () => await (0, exports.executeAction)('update-locked', dataId, { col: selectedCols[0], action: 'unlock' }));
    };
}
exports.unlockCols = unlockCols;
const persistVisibility = async (dataId, params) => await (0, GenericRepository_1.postDataToService)(`/dtale/update-visibility/${dataId}`, params);
const saveRangeHighlights = async (dataId, ranges) => await (0, GenericRepository_1.postDataToService)(`/dtale/save-range-highlights/${dataId}`, {
    ranges: JSON.stringify(ranges),
});
exports.saveRangeHighlights = saveRangeHighlights;
const updateSettings = async (settings, dataId) => await baseGetter((0, url_utils_1.buildURLString)(`update-settings/${dataId}?`, { settings: JSON.stringify(settings) }));
exports.updateSettings = updateSettings;
const dropFilteredRows = async (dataId, callback) => await baseGetter(`drop-filtered-rows/${dataId}`);
exports.dropFilteredRows = dropFilteredRows;
const moveFiltersToCustom = async (dataId) => await baseGetter(`move-filters-to-custom/${dataId}`);
exports.moveFiltersToCustom = moveFiltersToCustom;
const renameColumn = async (dataId, col, rename) => await baseGetter((0, url_utils_1.buildURLString)(`rename-col/${dataId}`, { col, rename }));
exports.renameColumn = renameColumn;
const updateFormats = async (dataId, col, format, all, nanDisplay) => await baseGetter((0, url_utils_1.buildURLString)(`update-formats/${dataId}`, {
    col,
    format: JSON.stringify(format),
    all: `${all}`,
    nanDisplay,
}));
exports.updateFormats = updateFormats;
const lastClickedCell = async (dataId, rowIndex, col) => {
    let colName = col ? col : '';
    return await baseGetter((0, url_utils_1.buildURLString)(`last-clicked-cell/${dataId}`, { col: `${colName}`, rowIndex: `${rowIndex}` }));
};
exports.lastClickedCell = lastClickedCell;
const editCell = async (dataId, col, rowIndex, updated) => await baseGetter((0, url_utils_1.buildURLString)(`edit-cell/${dataId}`, { col, rowIndex: `${rowIndex}`, updated }));
exports.editCell = editCell;
const updateTheme = async (theme) => await baseGetter((0, url_utils_1.buildURLString)('update-theme', { theme }));
exports.updateTheme = updateTheme;
const updateQueryEngine = async (engine) => await baseGetter((0, url_utils_1.buildURLString)('update-query-engine', { engine }));
exports.updateQueryEngine = updateQueryEngine;
const updatePinMenu = async (pinned) => await baseGetter((0, url_utils_1.buildURLString)('update-pin-menu', { pinned: `${pinned}` }));
exports.updatePinMenu = updatePinMenu;
const updateLanguage = async (language) => await baseGetter((0, url_utils_1.buildURLString)('update-language', { language }));
exports.updateLanguage = updateLanguage;
const updateMaxColumnWidth = async (width) => await baseGetter((0, url_utils_1.buildURLString)('update-maximum-column-width', { width: width ? `${width}` : '' }));
exports.updateMaxColumnWidth = updateMaxColumnWidth;
const updateMaxRowHeight = async (height) => await baseGetter((0, url_utils_1.buildURLString)('update-maximum-row-height', { height: `${height}` }));
exports.updateMaxRowHeight = updateMaxRowHeight;
const loadFilteredRanges = async (dataId) => await baseGetter(`load-filtered-ranges/${dataId}`);
exports.loadFilteredRanges = loadFilteredRanges;
const deleteCols = async (dataId, cols) => await baseGetter((0, url_utils_1.buildURLString)(`delete-col/${dataId}`, { cols: JSON.stringify(cols) }));
const moveToFront = (selectedCol, props) => moveTo(selectedCol, props, 'front');
exports.moveToFront = moveToFront;
const moveToBack = (selectedCol, props) => moveTo(selectedCol, props, 'back');
exports.moveToBack = moveToBack;
const moveRight = (selectedCol, props) => moveOnePosition(selectedCol, props, 'right');
exports.moveRight = moveRight;
const moveLeft = (selectedCol, props) => moveOnePosition(selectedCol, props, 'left');
exports.moveLeft = moveLeft;
const updateVisibility = async (dataId, visibility) => await persistVisibility(dataId, { visibility: JSON.stringify(visibility) });
exports.updateVisibility = updateVisibility;
const toggleVisibility = async (dataId, toggle) => await persistVisibility(dataId, { toggle });
exports.toggleVisibility = toggleVisibility;
const deleteColumn = async (dataId, col) => await deleteCols(dataId, [col]);
exports.deleteColumn = deleteColumn;
const deleteColumns = async (dataId, cols) => await deleteCols(dataId, cols);
exports.deleteColumns = deleteColumns;


/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("20583722cf15e60f3623")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRGpDLHdCQUFnQixvQkFDaUI7QUFDdkMsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxHQUFXLEVBQWMsRUFBRSxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFBbEcsb0JBQVksZ0JBQXNGO0FBQ3hHLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsSUFBYyxFQUFjLEVBQUUsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFBckcscUJBQWEsaUJBQXdGOzs7Ozs7Ozs7VUN6T2xIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHRhbGUvLi9zdGF0aWMvZHRhbGUvc2VydmVyU3RhdGVNYW5hZ2VtZW50LnRzIiwid2VicGFjazovL2R0YWxlL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaXNpYmlsaXR5U3RhdGUgfSBmcm9tICcuLi9wb3B1cHMvZGVzY3JpYmUvRGVzY3JpYmVTdGF0ZSc7XG5pbXBvcnQgeyBidWlsZFVSTFN0cmluZyB9IGZyb20gJy4uL3JlZHV4L2FjdGlvbnMvdXJsLXV0aWxzJztcbmltcG9ydCB7IEZpbHRlcmVkUmFuZ2VzLCBJbnN0YW5jZVNldHRpbmdzLCBRdWVyeUVuZ2luZSwgUmFuZ2VIaWdobGlnaHRDb25maWcgfSBmcm9tICcuLi9yZWR1eC9zdGF0ZS9BcHBTdGF0ZSc7XG5pbXBvcnQgeyBCYXNlUmVzcG9uc2UsIGdldERhdGFGcm9tU2VydmljZSwgcG9zdERhdGFUb1NlcnZpY2UgfSBmcm9tICcuLi9yZXBvc2l0b3J5L0dlbmVyaWNSZXBvc2l0b3J5JztcblxuaW1wb3J0IHsgQ29sdW1uRGVmLCBDb2x1bW5Gb3JtYXQsIERhdGFWaWV3ZXJQcm9wYWdhdGVTdGF0ZSB9IGZyb20gJy4vRGF0YVZpZXdlclN0YXRlJztcblxuLyoqIFR5cGUtZGVmaW50aW9uIGZvciBhbnkgY2FsbGJhY2sgZnVuY3Rpb24gKi9cbnR5cGUgQ2FsbGJhY2sgPSAocmVzcG9uc2U/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB2b2lkO1xuXG4vKiogVHlwZS1kZWZpbml0aW9uIGZvciBmdW5jdGlvbnMgcmV0dXJuaW5nIHN0YW5kYXJkIHN1Y2Nlc3MgcmVzcG9uc2VzICovXG5leHBvcnQgdHlwZSBCYXNlUmV0dXJuPFQgPSBCYXNlUmVzcG9uc2U+ID0gUHJvbWlzZTxUIHwgdW5kZWZpbmVkPjtcblxuY29uc3QgYmFzZUdldHRlciA9IGFzeW5jIDxUID0gQmFzZVJlc3BvbnNlPihhcGlFbmRwb2ludDogc3RyaW5nKTogQmFzZVJldHVybjxUPiA9PlxuICBhd2FpdCBnZXREYXRhRnJvbVNlcnZpY2U8VD4oYC9kdGFsZS8ke2FwaUVuZHBvaW50fWApO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZUFjdGlvbiA9IGFzeW5jIChyb3V0ZTogc3RyaW5nLCBkYXRhSWQ6IHN0cmluZywgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBnZXREYXRhRnJvbVNlcnZpY2U8QmFzZVJlc3BvbnNlPihidWlsZFVSTFN0cmluZyhgL2R0YWxlLyR7cm91dGV9LyR7ZGF0YUlkfT9gLCBwYXJhbXMpKTtcblxuLyoqIFBhcmFtZXRlcnMgcmVxdWlyZWQgZm9yIGFueSBjb2x1bW4gb3BlcmF0aW9uIChsb2NraW5nIG9yIG1vdmluZykgKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uT3BlcmF0aW9uUHJvcHMge1xuICBjb2x1bW5zOiBDb2x1bW5EZWZbXTtcbiAgcHJvcGFnYXRlU3RhdGU6IERhdGFWaWV3ZXJQcm9wYWdhdGVTdGF0ZTtcbiAgZGF0YUlkOiBzdHJpbmc7XG59XG5cbi8qKiBEaWZmZXJlbnQgY29sdW1uIG1vdmVtZW50cyAqL1xudHlwZSBNb3ZlQWN0aW9uID0gJ2Zyb250JyB8ICdiYWNrJyB8ICdsZWZ0JyB8ICdyaWdodCc7XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdG8gbW92ZSBhIGNvbHVtbiBvbmUgcG9zaXRpb24gbGVmdCBvciByaWdodC5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0ZWRDb2wgdGhlIGNvbHVtbiB0byBtb3ZlXG4gKiBAcGFyYW0gcHJvcHMgaW5wdXQgcGFyYW1ldGVycyBmb3IgY29sdW1uIG9wZXJhdGlvbnNcbiAqIEBwYXJhbSBhY3Rpb24gdGhlIG1vdmVtZW50IHRvIG1ha2VcbiAqIEByZXR1cm4gZnVuY3Rpb24gdG8gbW92ZSBhIGNvbHVtblxuICovXG5mdW5jdGlvbiBtb3ZlT25lUG9zaXRpb24oc2VsZWN0ZWRDb2w6IHN0cmluZywgcHJvcHM6IENvbHVtbk9wZXJhdGlvblByb3BzLCBhY3Rpb246IE1vdmVBY3Rpb24pOiAoKSA9PiB2b2lkIHtcbiAgY29uc3QgeyBjb2x1bW5zLCBwcm9wYWdhdGVTdGF0ZSwgZGF0YUlkIH0gPSBwcm9wcztcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBsb2NrZWQgPSBjb2x1bW5zLmZpbHRlcigoY29sdW1uKSA9PiBjb2x1bW4ubG9ja2VkKTtcbiAgICBjb25zdCB1bmxvY2tlZCA9IGNvbHVtbnMuZmlsdGVyKChjb2x1bW4pID0+ICFjb2x1bW4ubG9ja2VkKTtcbiAgICBjb25zdCBzZWxlY3RlZElkeCA9IHVubG9ja2VkLmZpbmRJbmRleCgoeyBuYW1lIH0pID0+IG5hbWUgPT09IHNlbGVjdGVkQ29sKTtcbiAgICBpZiAoYWN0aW9uID09PSAncmlnaHQnICYmIHNlbGVjdGVkSWR4ID09PSB1bmxvY2tlZC5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhY3Rpb24gPT09ICdsZWZ0JyAmJiBzZWxlY3RlZElkeCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtb3ZlVG9SaWdodElkeCA9IGFjdGlvbiA9PT0gJ3JpZ2h0JyA/IHNlbGVjdGVkSWR4IDogc2VsZWN0ZWRJZHggLSAxO1xuICAgIGNvbnN0IG1vdmVUb1JpZ2h0ID0geyAuLi51bmxvY2tlZFttb3ZlVG9SaWdodElkeF0gfTtcbiAgICBjb25zdCBtb3ZlVG9MZWZ0SWR4ID0gYWN0aW9uID09PSAncmlnaHQnID8gc2VsZWN0ZWRJZHggKyAxIDogc2VsZWN0ZWRJZHg7XG4gICAgY29uc3QgbW92ZVRvTGVmdCA9IHsgLi4udW5sb2NrZWRbbW92ZVRvTGVmdElkeF0gfTtcbiAgICB1bmxvY2tlZFttb3ZlVG9SaWdodElkeF0gPSBtb3ZlVG9MZWZ0O1xuICAgIHVubG9ja2VkW21vdmVUb0xlZnRJZHhdID0gbW92ZVRvUmlnaHQ7XG4gICAgY29uc3QgZmluYWxDb2xzID0gWy4uLmxvY2tlZCwgLi4udW5sb2NrZWRdO1xuICAgIHByb3BhZ2F0ZVN0YXRlKFxuICAgICAgeyBjb2x1bW5zOiBmaW5hbENvbHMsIHRyaWdnZXJSZXNpemU6IHRydWUgfSxcbiAgICAgIGFzeW5jICgpID0+IGF3YWl0IGV4ZWN1dGVBY3Rpb24oJ3VwZGF0ZS1jb2x1bW4tcG9zaXRpb24nLCBkYXRhSWQsIHsgY29sOiBzZWxlY3RlZENvbCwgYWN0aW9uIH0pLFxuICAgICk7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdG8gbW92ZSBhIGNvbHVtbiB0byB0aGUgZnJvbnQgb3IgYmFjay5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0ZWRDb2wgdGhlIGNvbHVtbiB0byBtb3ZlXG4gKiBAcGFyYW0gcHJvcHMgaW5wdXQgcGFyYW1ldGVycyBmb3IgY29sdW1uIG9wZXJhdGlvbnNcbiAqIEBwYXJhbSBhY3Rpb24gdGhlIG1vdmVtZW50IHRvIG1ha2VcbiAqIEByZXR1cm4gYSBmdW5jdGlvbiB0byBtb3ZlIGEgY29sdW1uXG4gKi9cbmZ1bmN0aW9uIG1vdmVUbyhzZWxlY3RlZENvbDogc3RyaW5nLCBwcm9wczogQ29sdW1uT3BlcmF0aW9uUHJvcHMsIGFjdGlvbjogTW92ZUFjdGlvbiA9ICdmcm9udCcpOiAoKSA9PiB2b2lkIHtcbiAgY29uc3QgeyBjb2x1bW5zLCBwcm9wYWdhdGVTdGF0ZSwgZGF0YUlkIH0gPSBwcm9wcztcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBsb2NrZWQgPSBjb2x1bW5zLmZpbHRlcigoY29sdW1uKSA9PiBjb2x1bW4ubG9ja2VkKTtcbiAgICBjb25zdCBjb2xzVG9Nb3ZlID0gY29sdW1ucy5maWx0ZXIoKGNvbHVtbikgPT4gc2VsZWN0ZWRDb2wgPT09IGNvbHVtbi5uYW1lICYmICFjb2x1bW4ubG9ja2VkKTtcbiAgICBjb25zdCB1bnNlbGVjdGVkQW5kVW5sb2NrZWRDb2xzID0gY29sdW1ucy5maWx0ZXIoXG4gICAgICAoeyBuYW1lIH0pID0+IHNlbGVjdGVkQ29sICE9PSBuYW1lICYmICFsb2NrZWQuZmluZCgoY29sdW1uKSA9PiBjb2x1bW4ubmFtZSA9PT0gbmFtZSksXG4gICAgKTtcbiAgICBjb25zdCBmaW5hbENvbHMgPVxuICAgICAgYWN0aW9uID09PSAnZnJvbnQnXG4gICAgICAgID8gWy4uLmxvY2tlZCwgLi4uY29sc1RvTW92ZSwgLi4udW5zZWxlY3RlZEFuZFVubG9ja2VkQ29sc11cbiAgICAgICAgOiBbLi4ubG9ja2VkLCAuLi51bnNlbGVjdGVkQW5kVW5sb2NrZWRDb2xzLCAuLi5jb2xzVG9Nb3ZlXTtcbiAgICBwcm9wYWdhdGVTdGF0ZShcbiAgICAgIHsgY29sdW1uczogZmluYWxDb2xzLCB0cmlnZ2VyUmVzaXplOiB0cnVlIH0sXG4gICAgICBhc3luYyAoKSA9PiBhd2FpdCBleGVjdXRlQWN0aW9uKCd1cGRhdGUtY29sdW1uLXBvc2l0aW9uJywgZGF0YUlkLCB7IGNvbDogc2VsZWN0ZWRDb2wsIGFjdGlvbiB9KSxcbiAgICApO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRvIHBpbiBjb2x1bW5zIHRvIHRoZSBsZWZ0LWhhbmQgc2lkZSBvZiB0aGUgZ3JpZC5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0ZWRDb2xzIHRoZSBjb2x1bW5zIHRvIHBpblxuICogQHBhcmFtIHByb3BzIGlucHV0IHBhcmFtZXRlcnMgZm9yIGNvbHVtbiBvcGVyYXRpb25zXG4gKiBAcmV0dXJuIGEgZnVuY3Rpb24gdG8gcGluIGNvbHVtbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvY2tDb2xzKHNlbGVjdGVkQ29sczogc3RyaW5nW10sIHByb3BzOiBDb2x1bW5PcGVyYXRpb25Qcm9wcyk6ICgpID0+IHZvaWQge1xuICBjb25zdCB7IGNvbHVtbnMsIHByb3BhZ2F0ZVN0YXRlLCBkYXRhSWQgfSA9IHByb3BzO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRseUxvY2tlZCA9IGNvbHVtbnMuZmlsdGVyKChjb2x1bW4pID0+IGNvbHVtbi5sb2NrZWQpO1xuICAgIGNvbnN0IG5ld0xvY2tzID0gY29sdW1uc1xuICAgICAgLmZpbHRlcigoeyBuYW1lIH0pID0+IHNlbGVjdGVkQ29scy5pbmNsdWRlcyhuYW1lKSlcbiAgICAgIC5tYXAoKGNvbHVtbikgPT4gKHsgLi4uY29sdW1uLCBsb2NrZWQ6IHRydWUgfSkpO1xuICAgIGNvbnN0IGxvY2tlZCA9IFsuLi5jdXJyZW50bHlMb2NrZWQsIC4uLm5ld0xvY2tzXTtcbiAgICBwcm9wYWdhdGVTdGF0ZShcbiAgICAgIHtcbiAgICAgICAgY29sdW1uczogWy4uLmxvY2tlZCwgLi4uY29sdW1ucy5maWx0ZXIoKHsgbmFtZSB9KSA9PiAhbG9ja2VkLmZpbmQoKGNvbHVtbikgPT4gY29sdW1uLm5hbWUgPT09IG5hbWUpKV0sXG4gICAgICAgIGZpeGVkQ29sdW1uQ291bnQ6IGxvY2tlZC5sZW5ndGgsXG4gICAgICAgIHRyaWdnZXJSZXNpemU6IHRydWUsXG4gICAgICB9LFxuICAgICAgYXN5bmMgKCkgPT4gYXdhaXQgZXhlY3V0ZUFjdGlvbigndXBkYXRlLWxvY2tlZCcsIGRhdGFJZCwgeyBjb2w6IHNlbGVjdGVkQ29sc1swXSwgYWN0aW9uOiAnbG9jaycgfSksXG4gICAgKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB0byB1bnBpbiBjb2x1bW5zIGZyb20gdGhlIGxlZnQtaGFuZCBzaWRlIG9mIHRoZSBncmlkLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RlZENvbHMgdGhlIGNvbHVtbnMgdG8gdW5waW5cbiAqIEBwYXJhbSBwcm9wcyBpbnB1dCBwYXJhbWV0ZXJzIGZvciBjb2x1bW4gb3BlcmF0aW9uc1xuICogQHJldHVybiBhIGZ1bmN0aW9uIHVucGluIGNvbHVtbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubG9ja0NvbHMoc2VsZWN0ZWRDb2xzOiBzdHJpbmdbXSwgcHJvcHM6IENvbHVtbk9wZXJhdGlvblByb3BzKTogKCkgPT4gdm9pZCB7XG4gIGNvbnN0IHsgY29sdW1ucywgcHJvcGFnYXRlU3RhdGUsIGRhdGFJZCB9ID0gcHJvcHM7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudGx5TG9ja2VkID0gY29sdW1ucy5maWx0ZXIoKGNvbHVtbikgPT4gY29sdW1uLmxvY2tlZCk7XG4gICAgY29uc3QgdW5sb2NrZWQgPSBjdXJyZW50bHlMb2NrZWRcbiAgICAgIC5maWx0ZXIoKHsgbmFtZSB9KSA9PiBzZWxlY3RlZENvbHMuaW5jbHVkZXMobmFtZSkpXG4gICAgICAubWFwKChjb2x1bW4pID0+ICh7IC4uLmNvbHVtbiwgbG9ja2VkOiBmYWxzZSB9KSk7XG4gICAgY29uc3QgbG9ja2VkID0gY3VycmVudGx5TG9ja2VkLmZpbHRlcigoeyBuYW1lIH0pID0+ICFzZWxlY3RlZENvbHMuaW5jbHVkZXMobmFtZSkpO1xuICAgIHByb3BhZ2F0ZVN0YXRlKFxuICAgICAge1xuICAgICAgICBjb2x1bW5zOiBbLi4ubG9ja2VkLCAuLi51bmxvY2tlZCwgLi4uY29sdW1ucy5maWx0ZXIoKGMpID0+ICFjLmxvY2tlZCldLFxuICAgICAgICBmaXhlZENvbHVtbkNvdW50OiBsb2NrZWQubGVuZ3RoLFxuICAgICAgICB0cmlnZ2VyUmVzaXplOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGFzeW5jICgpID0+IGF3YWl0IGV4ZWN1dGVBY3Rpb24oJ3VwZGF0ZS1sb2NrZWQnLCBkYXRhSWQsIHsgY29sOiBzZWxlY3RlZENvbHNbMF0sIGFjdGlvbjogJ3VubG9jaycgfSksXG4gICAgKTtcbiAgfTtcbn1cblxuY29uc3QgcGVyc2lzdFZpc2liaWxpdHkgPSBhc3luYyAoZGF0YUlkOiBzdHJpbmcsIHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IEJhc2VSZXR1cm4gPT5cbiAgYXdhaXQgcG9zdERhdGFUb1NlcnZpY2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPiwgQmFzZVJlc3BvbnNlPihgL2R0YWxlL3VwZGF0ZS12aXNpYmlsaXR5LyR7ZGF0YUlkfWAsIHBhcmFtcyk7XG5cbmV4cG9ydCBjb25zdCBzYXZlUmFuZ2VIaWdobGlnaHRzID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nLCByYW5nZXM6IFJhbmdlSGlnaGxpZ2h0Q29uZmlnKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBwb3N0RGF0YVRvU2VydmljZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LCBCYXNlUmVzcG9uc2U+KGAvZHRhbGUvc2F2ZS1yYW5nZS1oaWdobGlnaHRzLyR7ZGF0YUlkfWAsIHtcbiAgICByYW5nZXM6IEpTT04uc3RyaW5naWZ5KHJhbmdlcyksXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlU2V0dGluZ3MgPSBhc3luYyAoc2V0dGluZ3M6IFBhcnRpYWw8SW5zdGFuY2VTZXR0aW5ncz4sIGRhdGFJZDogc3RyaW5nKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGJ1aWxkVVJMU3RyaW5nKGB1cGRhdGUtc2V0dGluZ3MvJHtkYXRhSWR9P2AsIHsgc2V0dGluZ3M6IEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSB9KSk7XG5cbmV4cG9ydCBjb25zdCBkcm9wRmlsdGVyZWRSb3dzID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nLCBjYWxsYmFjaz86IENhbGxiYWNrKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGBkcm9wLWZpbHRlcmVkLXJvd3MvJHtkYXRhSWR9YCk7XG5cbi8qKiBSZXNwb25zZSBjb250ZW50cyBmb3Igc2V0dGluZ3MgdXBkYXRlIHJlcXVlc3RzICovXG5pbnRlcmZhY2UgU2V0dGluZ1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgc2V0dGluZ3M6IEluc3RhbmNlU2V0dGluZ3M7XG59XG5cbmV4cG9ydCBjb25zdCBtb3ZlRmlsdGVyc1RvQ3VzdG9tID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nKTogQmFzZVJldHVybjxTZXR0aW5nUmVzcG9uc2U+ID0+XG4gIGF3YWl0IGJhc2VHZXR0ZXI8U2V0dGluZ1Jlc3BvbnNlPihgbW92ZS1maWx0ZXJzLXRvLWN1c3RvbS8ke2RhdGFJZH1gKTtcblxuZXhwb3J0IGNvbnN0IHJlbmFtZUNvbHVtbiA9IGFzeW5jIChkYXRhSWQ6IHN0cmluZywgY29sOiBzdHJpbmcsIHJlbmFtZTogc3RyaW5nKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGJ1aWxkVVJMU3RyaW5nKGByZW5hbWUtY29sLyR7ZGF0YUlkfWAsIHsgY29sLCByZW5hbWUgfSkpO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlRm9ybWF0cyA9IGFzeW5jIChcbiAgZGF0YUlkOiBzdHJpbmcsXG4gIGNvbDogc3RyaW5nLFxuICBmb3JtYXQ6IENvbHVtbkZvcm1hdCxcbiAgYWxsOiBib29sZWFuLFxuICBuYW5EaXNwbGF5OiBzdHJpbmcsXG4pOiBCYXNlUmV0dXJuID0+XG4gIGF3YWl0IGJhc2VHZXR0ZXIoXG4gICAgYnVpbGRVUkxTdHJpbmcoYHVwZGF0ZS1mb3JtYXRzLyR7ZGF0YUlkfWAsIHtcbiAgICAgIGNvbCxcbiAgICAgIGZvcm1hdDogSlNPTi5zdHJpbmdpZnkoZm9ybWF0KSxcbiAgICAgIGFsbDogYCR7YWxsfWAsXG4gICAgICBuYW5EaXNwbGF5LFxuICAgIH0pLFxuICApO1xuXG5leHBvcnQgY29uc3QgbGFzdENsaWNrZWRDZWxsID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nLCByb3dJbmRleDogbnVtYmVyLCBjb2w/OiBzdHJpbmcpOiBCYXNlUmV0dXJuID0+IHtcbiAgbGV0IGNvbE5hbWU6IHN0cmluZyA9IGNvbCA/IGNvbCA6ICcnO1xuICByZXR1cm4gYXdhaXQgYmFzZUdldHRlcihidWlsZFVSTFN0cmluZyhgbGFzdC1jbGlja2VkLWNlbGwvJHtkYXRhSWR9YCwge2NvbDogYCR7Y29sTmFtZX1gLCByb3dJbmRleDogYCR7cm93SW5kZXh9YH0pKTtcbn1cblxuZXhwb3J0IGNvbnN0IGVkaXRDZWxsID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nLCBjb2w6IHN0cmluZywgcm93SW5kZXg6IG51bWJlciwgdXBkYXRlZDogc3RyaW5nKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGJ1aWxkVVJMU3RyaW5nKGBlZGl0LWNlbGwvJHtkYXRhSWR9YCwgeyBjb2wsIHJvd0luZGV4OiBgJHtyb3dJbmRleH1gLCB1cGRhdGVkIH0pKTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVRoZW1lID0gYXN5bmMgKHRoZW1lOiBzdHJpbmcpOiBCYXNlUmV0dXJuID0+XG4gIGF3YWl0IGJhc2VHZXR0ZXIoYnVpbGRVUkxTdHJpbmcoJ3VwZGF0ZS10aGVtZScsIHsgdGhlbWUgfSkpO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlUXVlcnlFbmdpbmUgPSBhc3luYyAoZW5naW5lOiBRdWVyeUVuZ2luZSk6IEJhc2VSZXR1cm4gPT5cbiAgYXdhaXQgYmFzZUdldHRlcihidWlsZFVSTFN0cmluZygndXBkYXRlLXF1ZXJ5LWVuZ2luZScsIHsgZW5naW5lIH0pKTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVBpbk1lbnUgPSBhc3luYyAocGlubmVkOiBib29sZWFuKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGJ1aWxkVVJMU3RyaW5nKCd1cGRhdGUtcGluLW1lbnUnLCB7IHBpbm5lZDogYCR7cGlubmVkfWAgfSkpO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlTGFuZ3VhZ2UgPSBhc3luYyAobGFuZ3VhZ2U6IHN0cmluZyk6IEJhc2VSZXR1cm4gPT5cbiAgYXdhaXQgYmFzZUdldHRlcihidWlsZFVSTFN0cmluZygndXBkYXRlLWxhbmd1YWdlJywgeyBsYW5ndWFnZSB9KSk7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVNYXhDb2x1bW5XaWR0aCA9IGFzeW5jICh3aWR0aD86IG51bWJlcik6IEJhc2VSZXR1cm4gPT5cbiAgYXdhaXQgYmFzZUdldHRlcihidWlsZFVSTFN0cmluZygndXBkYXRlLW1heGltdW0tY29sdW1uLXdpZHRoJywgeyB3aWR0aDogd2lkdGggPyBgJHt3aWR0aH1gIDogJycgfSkpO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlTWF4Um93SGVpZ2h0ID0gYXN5bmMgKGhlaWdodDogbnVtYmVyKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGJ1aWxkVVJMU3RyaW5nKCd1cGRhdGUtbWF4aW11bS1yb3ctaGVpZ2h0JywgeyBoZWlnaHQ6IGAke2hlaWdodH1gIH0pKTtcblxuLyoqIFJlc3BvbnNlIGNvbnRlbnRzIGZvciByYW5nZSBoaWdobGlnaHQgcmVxdWVzdHMgKi9cbmludGVyZmFjZSBSYW5nZVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgcmFuZ2VzOiBGaWx0ZXJlZFJhbmdlcztcbn1cblxuZXhwb3J0IGNvbnN0IGxvYWRGaWx0ZXJlZFJhbmdlcyA9IGFzeW5jIChkYXRhSWQ6IHN0cmluZyk6IEJhc2VSZXR1cm48UmFuZ2VSZXNwb25zZT4gPT5cbiAgYXdhaXQgYmFzZUdldHRlcjxSYW5nZVJlc3BvbnNlPihgbG9hZC1maWx0ZXJlZC1yYW5nZXMvJHtkYXRhSWR9YCk7XG5cbmNvbnN0IGRlbGV0ZUNvbHMgPSBhc3luYyAoZGF0YUlkOiBzdHJpbmcsIGNvbHM6IHN0cmluZ1tdKTogQmFzZVJldHVybiA9PlxuICBhd2FpdCBiYXNlR2V0dGVyKGJ1aWxkVVJMU3RyaW5nKGBkZWxldGUtY29sLyR7ZGF0YUlkfWAsIHsgY29sczogSlNPTi5zdHJpbmdpZnkoY29scykgfSkpO1xuXG5leHBvcnQgY29uc3QgbW92ZVRvRnJvbnQgPSAoc2VsZWN0ZWRDb2w6IHN0cmluZywgcHJvcHM6IENvbHVtbk9wZXJhdGlvblByb3BzKTogKCgpID0+IHZvaWQpID0+XG4gIG1vdmVUbyhzZWxlY3RlZENvbCwgcHJvcHMsICdmcm9udCcpO1xuZXhwb3J0IGNvbnN0IG1vdmVUb0JhY2sgPSAoc2VsZWN0ZWRDb2w6IHN0cmluZywgcHJvcHM6IENvbHVtbk9wZXJhdGlvblByb3BzKTogKCgpID0+IHZvaWQpID0+XG4gIG1vdmVUbyhzZWxlY3RlZENvbCwgcHJvcHMsICdiYWNrJyk7XG5leHBvcnQgY29uc3QgbW92ZVJpZ2h0ID0gKHNlbGVjdGVkQ29sOiBzdHJpbmcsIHByb3BzOiBDb2x1bW5PcGVyYXRpb25Qcm9wcyk6ICgoKSA9PiB2b2lkKSA9PlxuICBtb3ZlT25lUG9zaXRpb24oc2VsZWN0ZWRDb2wsIHByb3BzLCAncmlnaHQnKTtcbmV4cG9ydCBjb25zdCBtb3ZlTGVmdCA9IChzZWxlY3RlZENvbDogc3RyaW5nLCBwcm9wczogQ29sdW1uT3BlcmF0aW9uUHJvcHMpOiAoKCkgPT4gdm9pZCkgPT5cbiAgbW92ZU9uZVBvc2l0aW9uKHNlbGVjdGVkQ29sLCBwcm9wcywgJ2xlZnQnKTtcbmV4cG9ydCBjb25zdCB1cGRhdGVWaXNpYmlsaXR5ID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nLCB2aXNpYmlsaXR5OiBWaXNpYmlsaXR5U3RhdGUpOiBCYXNlUmV0dXJuID0+XG4gIGF3YWl0IHBlcnNpc3RWaXNpYmlsaXR5KGRhdGFJZCwgeyB2aXNpYmlsaXR5OiBKU09OLnN0cmluZ2lmeSh2aXNpYmlsaXR5KSB9KTtcbmV4cG9ydCBjb25zdCB0b2dnbGVWaXNpYmlsaXR5ID0gYXN5bmMgKGRhdGFJZDogc3RyaW5nLCB0b2dnbGU6IHN0cmluZyk6IEJhc2VSZXR1cm4gPT5cbiAgYXdhaXQgcGVyc2lzdFZpc2liaWxpdHkoZGF0YUlkLCB7IHRvZ2dsZSB9KTtcbmV4cG9ydCBjb25zdCBkZWxldGVDb2x1bW4gPSBhc3luYyAoZGF0YUlkOiBzdHJpbmcsIGNvbDogc3RyaW5nKTogQmFzZVJldHVybiA9PiBhd2FpdCBkZWxldGVDb2xzKGRhdGFJZCwgW2NvbF0pO1xuZXhwb3J0IGNvbnN0IGRlbGV0ZUNvbHVtbnMgPSBhc3luYyAoZGF0YUlkOiBzdHJpbmcsIGNvbHM6IHN0cmluZ1tdKTogQmFzZVJldHVybiA9PiBhd2FpdCBkZWxldGVDb2xzKGRhdGFJZCwgY29scyk7XG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIyMDU4MzcyMmNmMTVlNjBmMzYyM1wiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==